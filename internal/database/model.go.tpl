//this file was generated by Robots, Don't Edit!!!!!!
package database

import(
	"time"
	"errors"
	"golayout/pkg/logger"
{{- range .Imports}}
	"{{.}}"
{{- end}}
)

{{stateTypeStr .Columns .StructName}}

type {{.StructName}} struct{
{{- range .Columns}}
	{{.Field}} {{.Type}} `db:"{{.DbTag}}" json:"{{.DbTag}}"` //{{.Comments}}
{{- end}}
	deleted bool `db:"-"`
}

func ({{.Var}} {{.StructName}}) TableName() string{
	return "{{.TableName}}"
}

func ({{.Var}} *{{.StructName}}) Exists() bool{
	return {{.Var}}.Id != 0
}

func ({{.Var}} *{{.StructName}}) IsDeleted() bool{
	return {{.Var}}.deleted
}

func Get{{.StructName}}ById(id uint64) (*{{.StructName}}, error) {
	var {{.Var}} {{.StructName}}
	err := db.Select(&{{.Var}}, "SELECT * FROM {{.TableName}} where id = ?", id)
	if err != nil {
		logger.Error(err)
	}
	return &{{.Var}}, err
}

//get{{.StructName}}By Write your own sql in another function
func get{{.StructName}}By(sqlStr string, args ...interface{})([]*{{.StructName}}, error) {
	var (
		{{.Var}}s []*{{.StructName}}
		err    error
	)
	err = db.Select(&{{.Var}}s, sqlStr, args...)
	if err != nil {
		logger.Error(err)
	}
	return {{.Var}}s, err
}

func ({{.Var}} *{{.StructName}}) Insert() error{
	var err error
	if {{.Var}}.Exists() {
		return errors.New("insert failed: already exists")
	}
	{{.Var}}.CreatedAt = time.Now()
	{{.Var}}.UpdatedAt = {{.Var}}.CreatedAt
  //sql query
	const sqlstr = `
		INSERT INTO {{.TableName}} {{insertStr .Columns}}
	`
	tx := db.MustBegin()
	result, err := tx.NamedExec(sqlstr, {{.Var}})
	if err != nil {
		tx.Rollback()
	} else {
		err = tx.Commit()
	}
	if err != nil {
		logger.Error(err)
		return err
	}

	newID, err := result.LastInsertId()
	if err != nil{
		return err
	}

	{{.Var}}.Id = uint64(newID)

	return nil
}

func ({{.Var}} *{{.StructName}}) Drop() error{
	if !{{.Var}}.Exists() {
		return errors.New("Delete failed: does not exists")
	}

	if {{.Var}}.deleted {
		return nil
	}

	const sqlstr = `
		DELETE FROM {{.TableName}} where id= ?
	`
	tx := db.MustBegin()
	_, err := tx.Queryx(sqlstr, &{{.Var}}.Id) 
	if err != nil{
		logger.Error(err)
		return tx.Rollback()
	}
  
	if err = tx.Commit(); err != nil{
		logger.Error(err)
		return err
	}
	{{.Var}}.deleted = true

	return nil
}

//UPdate Warning!!! this function will update all fields
func ({{.Var}} {{.StructName}}) Update() error{
	const sqlstr = `
		UPDATE {{.TableName}} {{updateStr .Columns}} where id = ?
	`

	tx := db.MustBegin()
	_, err := tx.Queryx(sqlstr, &{{.Var}}.Id) 
	if err != nil{
		logger.Error(err)
		return tx.Rollback()
	}
  
	if err = tx.Commit(); err != nil{
		logger.Error(err)
		return err
	}
	return nil
}